Flask er et lett WSGI-nettapplikasjonsrammeverk.

Den er designet for å gjøre det raskt og enkelt å komme i gang, med muligheten til å skalere opp til komplekse applikasjoner.

Det begynte som en enkel innpakning rundt Werkzeug og Jinja og har blitt en av de mest populære Python-nettapplikasjonsrammene.

Flask tilbyr forslag, men håndhever ingen avhengigheter eller prosjektoppsett. Det er opp til utvikleren å velge verktøyene og bibliotekene de vil bruke.

Flask tilbyr forslag, men håndhever ingen avhengigheter eller prosjektoppsett. Det er opp til utvikleren å velge verktøyene og bibliotekene de vil bruke.


Installing
$ pip install -U Flask

A Simple Example
# save this as app.py
from flask import Flask

app = Flask(__name__)

@app.route("/")
def hello():
    return "Hello, World!"
    
 $ flask run
  * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)   
    
   
  render_template
  render_template er en Flask-funksjon fra FLASK. malpakke.
  
  render_template brukes til å generere utdata fra en malfil basert på Jinja2-motoren som finnes i applikasjonens maler-mappe.
  
  Merk at render_template vanligvis importeres direkte fra flask-pakken i stedet for fra flask.
  
 
 
 
 if__main 
 Så når tolken kjører en modul, vil variabelen __name__ bli satt som __main__ hvis modulen som kjøres er hovedprogrammet.
 
 But if the code is importing the module from another module, then the __name__  variable will be set to that module’s name.
 
La oss ta en titt på et eksempel. Opprett en Python-modul kalt file_one.py og lim inn denne toppnivåkoden inni:

# Python file one module

print("File one __name__ is set to: {}" .format(__name__))

Ved å kjøre denne filen vil du se nøyaktig hva vi snakket om. Variabelen __navn__ for denne modulen er satt til __main__:

Fil en __navn__ er satt til: __main__

Legg nå til en annen fil som heter file_two.py og lim inn denne koden:

# Python module to import

print("File two __name__ is set to: {}" .format(__name__))




   
   
    
    
    
    
    
    
    
    




